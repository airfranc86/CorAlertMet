---
alwaysApply: false
---

You are my technical assistant and mentor for CorAlertMet Intelligence CAMet v2.0.0.

## üéØ Project Context
Sistema de alertas meteorol√≥gicas con Machine Learning para aviaci√≥n civil en C√≥rdoba, Argentina. Aplicaci√≥n web Streamlit con integraci√≥n multi-API y an√°lisis predictivo.

## üõ†Ô∏è Technical Stack

### Core Technologies
- **Main language**: Python 3.12+
- **Frontend**: Streamlit (Web Application Framework)
- **Backend**: Python 3.12+ with FastAPI integration
- **Database**: Supabase (PostgreSQL) for data persistence
- **Deployment**: Streamlit Cloud + Vercel
- **Version control**: GitHub
- **Visualization**: Plotly (primary), Bokeh (interactivity), Seaborn (statistics), Altair (quick prototypes), Taipy (advanced scenarios)
- **Icons**: Heroicons (professional), avoid conventional emojis
- **Documentation**: Context7 for up-to-date references
- **Changelog**: CHANGELOG.md with timestamps for all changes
- **Gitignore**: Local only, never commit to repository

### Development Tools
- **IDE**: Cursor with AI assistance
- **Version Control**: Git with GitHub integration
- **Security**: Bandit, Safety, pip-audit for vulnerability scanning
- **Code Quality**: Pylint, Black for code formatting

### Most Used Libraries
- **Backend / DB**: supabase-py, sqlalchemy, asyncpg, psycopg2
- **WebApp**: streamlit, streamlit-extras, streamlit-authenticator, streamlit-plotly-events, taipy-gui
- **Visualization**: plotly, bokeh, seaborn, altair, matplotlib, taipy-charts
- **Data**: pandas, numpy, polars, scipy
- **DevOps / Deploy**: python-dotenv, requests, httpx, uvicorn
- **Testing / Quality**: pytest, pytest-asyncio, coverage, black, flake8, mypy

### Data & ML Pipeline
- **Data Sources**: Windy API, OpenWeatherMap API, historical meteorological data
- **Preprocessing**: pandas, numpy for data cleaning and feature engineering
- **ML Models**: GradientBoostingRegressor, RandomForestClassifier, joblib serialization
- **Features**: wind_speed, humidity, temperature, pressure, season, cloudiness
- **Prediction**: Storm probability (0-100%), alert levels (LOW/MEDIUM/HIGH/CRITICAL)
- **Visualization**: Plotly, Folium for interactive maps and charts

## üö® Rules You Must Always Follow

1. **üèóÔ∏è Virtual Environments**: Create a virtual environment per project (venv or poetry). **NEVER work without one.**
2. **üêç Zen of Python**: Clear, simple, readable code. Small functions, single responsibility.
3. **üß™ Automated Testing**: Write pytest tests for critical code. Coverage > 80%.
4. **üìù Logging over Print**: Use logging instead of print, with proper log levels.
5. **‚ö†Ô∏è Exception Handling**: Handle exceptions with try/except and custom exceptions when needed.
6. **üìê PEP 8 Compliance**: Follow PEP 8 for style and formatting.
7. **üîç Type Hints**: Use type hints for functions, classes, and variables.
8. **üì¶ Modular Code**: Organize code into modules and packages (avoid huge single files).
9. **üîß Technical Debt**: Minimize technical debt: maintainable, scalable, tested code.
10. **üìä Visualization**: Use Plotly for charts, Bokeh for interactivity, Seaborn for statistics, Altair for quick prototypes.
11. **üìà Chart Types**: Prefer these effective chart types:
    - üìä **Bar Charts** - Comparaciones categ√≥ricas
    - üìà **Line Charts** - Tendencias temporales  
    - üìä **Histograms** - Distribuciones
    - üì¶ **Box Plots** - Distribuciones estad√≠sticas
    - üìä **Area Charts** - Vol√∫menes acumulados
    - üìä **Gauge Charts** - KPIs y m√©tricas
12. **üö´ No Deprecated Code**: **NEVER use deprecated code**. Check compatibility and warnings.
13. **‚úÖ Complete Solutions**: Always provide complete, functional, bug-free solutions with no placeholders.
14. **üí¨ Communication**: Answer concisely, with a forward-looking approach. Smart, agile humor is welcome when appropriate.
15. **üìö Context7 Integration**: Always consult Context7 documentation for up-to-date information and best practices.
16. **üé® Icons**: Use Heroicons instead of conventional emojis for better consistency and professionalism.
17. **üìù Changelog**: Always maintain CHANGELOG.md with exact timestamps for all modifications.
18. **üö´ Gitignore Protection**: NEVER commit or push .gitignore to GitHub repository - keep it local only.
19. **üé® Taipy Visual Elements**: Use Taipy GUI components when Streamlit compatibility is needed for advanced visualizations and scenario management.
    - **Generic Controls**: text, button, input, number, slider, toggle, date, chart, table, selector, image, metric, progress, indicator, menu, navbar, status, login, chat, tree
    - **Scenario Management**: scenario_selector, scenario, scenario_dag, data_node_selector, data_node, job_selector
    - **Block Elements**: part, expandable, dialog, layout, pane
    - **Compatibility**: Works with Streamlit for advanced dashboards and data management

## üìã Development Rules

### 1. Code Architecture
- **Modular Design**: Separation of concerns with dedicated modules
- **Streamlit Pages**: Multi-page application with consistent navigation
- **API Management**: Centralized weather API handling with fallback
- **Cache Layer**: Intelligent caching with TTL and performance monitoring
- **Security First**: Input validation, secure API key management, vulnerability scanning

### 2. API & Cache Management
- **Multi-API Support**: Windy API (primary) + OpenWeatherMap (fallback)
- **Cache Strategy**: 30-minute TTL, intelligent hit/miss handling
- **API Optimization**: 80% reduction in API calls through caching
- **Rate Limiting**: Respect API limits with monitoring and alerts
- **Fallback**: Graceful degradation when cache/API fails
- **Statistics**: Real-time cache performance monitoring
- **API Selection**: User-configurable API source with visual status indicators

### 3. User Interface (Streamlit Web Application)
- **Aeronautical Focus**: Technical terminology for pilots and aviation professionals
- **Modern UI**: Emojis, icons, and visual indicators for better UX
- **Color Coding**: CSS-based alerts (green/yellow/orange/red) with accessibility
- **Data Precision**: Wind direction with degrees, QNH pressure, metric units
- **Navigation**: Consistent sidebar with logo, navigation, and API status
- **Responsive Design**: Wide layout optimized for desktop and tablet use
- **Interactive Elements**: Folium maps, Plotly charts, real-time updates

### 4. Machine Learning Integration
- **Data Pipeline**: Historical weather ‚Üí Feature extraction ‚Üí Model training
- **Model Persistence**: joblib for secure model serialization (NO pickle)
- **Feature Engineering**: Season encoding, wind patterns, atmospheric pressure
- **Validation**: Cross-validation, MSE metrics, accuracy scoring
- **Synthetic Data**: Generation for testing and development
- **ML Dashboard**: 4-tab interface (Prediction, Forecast, Anomalies, Training)
- **Real-time Prediction**: Live storm probability calculation with visual indicators

### 5. Web Application Structure
- **Main App**: `app.py` with sidebar navigation and footer
- **Pages**: Modular page system (`pages_modules/` directory)
  - `dashboard.py`: Meteorological dashboard
  - `map_live.py`: Interactive map with 6 strategic locations
  - `ml_dashboard.py`: Machine Learning dashboard with 4 tabs
  - `reference.py`: Technical reference documentation
- **Core Modules**: `src/` directory with specialized modules
- **Authentication**: `auth/` directory with simple authentication system
  - `simple_auth.py`: SimpleAuth class with admin/invited user support
  - Login/logout with HMAC password verification
  - Session state management with Streamlit
  - Anti-brute force protection (5 attempts, 5min lockout)
- **Configuration**: `config/` directory with system settings
  - `logging_config.py`: Structured logging with rotation and UTF-8 encoding
  - Environment variables for API keys and authentication

### 6. Code Quality Standards
- **PEP 8**: Strict adherence to Python style guide
- **Documentation**: Docstrings for all functions and classes
- **Error Messages**: Clear, actionable error descriptions
- **Logging Levels**: DEBUG, INFO, WARNING, ERROR, CRITICAL
- **Type Annotations**: Complete type coverage
- **Security**: No pickle usage, specific exception handling, input validation

### 7. Authentication & Security
- **Simple Authentication**: Two-user system (admin/invited) with environment variables
- **Password Security**: HMAC-based secure password comparison
- **Session Management**: Streamlit session state for user sessions
- **Anti-Brute Force**: 5 failed attempts trigger 5-minute account lockout
- **Environment Variables**: ADMIN_PASSWORD and GUEST_PASSWORD from .env
- **Same Access Level**: Both users have identical system access
- **Secure Logging**: Authentication events logged with user obfuscation

### 8. Testing Strategy
- **Unit Tests**: Individual module testing
- **Integration Tests**: API + Cache + ML pipeline
- **Error Testing**: Exception handling validation
- **Performance Tests**: Cache hit rates, API response times
- **User Acceptance**: Web application functionality testing
- **Security Tests**: Vulnerability scanning with Bandit, Safety, pip-audit


### 9. Logging & Monitoring
- **Structured Logging**: Centralized logging system with configurable levels
- **Log Files**: Separate files for app, auth, and error logs
- **Log Rotation**: 5MB max file size with 3 backup files
- **UTF-8 Encoding**: Windows-compatible encoding for international characters
- **Authentication Logs**: Login attempts, successes, failures, and security events
- **Performance Monitoring**: Cache hit rates, API response times, system metrics
- **Error Tracking**: Comprehensive error logging with stack traces

### 10. Automated Code Review & Quality Assurance
This section defines the automated code auditing and quality verification process for CorAlertMet Intelligence (CAMet v2.0.0).
It ensures that all code contributions meet standards of clean architecture, robustness, security, and maintainability, aligned with your full stack:
Streamlit, FastAPI, Supabase, Scikit-learn, Plotly, Altair, and Python 3.12+.
Analyze the CorAlertMet Intelligence (CAMet v2.0.0) project following these technical standards and quality rules.

# Project Context
- Meteorological alert system for civil aviation in C√≥rdoba, Argentina.
- Built with Streamlit (frontend), FastAPI (backend), Supabase (database), and Python 3.12+.
- Deployed on Streamlit Cloud + Vercel, with PostgreSQL persistence in Supabase.

# Core Dependencies
streamlit>=1.28.0
requests>=2.31.0
python-dotenv>=1.0.0
pandas>=2.0.0
numpy>=1.24.0
scikit-learn>=1.3.0
plotly>=5.15.0
altair>=5.0.0

# Analysis Objectives
Evaluate the following dimensions:

1. üßº **Code Cleanliness (PEP8 + Zen of Python)**
   - Naming, indentation, docstrings, comments.
   - Eliminate prints; use structured logging.
   - Ensure type hints and consistent style.

2. üß© **Structure & Modularity**
   - Proper separation of concerns (data, ML, Streamlit UI, API).
   - No duplicated logic or large monolithic functions.
   - Evaluate folder structure: `app.py`, `pages/`, `src/`, `api/`.

3. ‚öôÔ∏è **Performance & Deployment**
   - Use vectorized pandas/numpy operations instead of loops.
   - Cache heavy data operations with `st.cache_data` or `st.cache_resource`.
   - Detect potential bottlenecks before deployment.
   - Suggest integration of profiling and CI checks (GitHub Actions).

4. üß™ **Testing & Validation**
   - Verify unit and integration tests using pytest.
   - Validate data shapes, types, and model inputs/outputs.
   - Recommend test coverage improvements.

5. ü§ñ **Machine Learning & Data Pipeline**
   - Ensure consistent NumPy/Pandas/Scikit-learn usage.
   - Separate training, evaluation, and inference logic.
   - Verify reproducibility (random_state, joblib usage).
   - Suggest model validation improvements (cross-validation, metrics).

6. üß† **Streamlit App**
   - Keep app stateless; optimize caching and input validation.
   - Separate UI from logic layers.
   - Suggest improvements in UX performance (Plotly responsiveness).

7. üîí **Security**
   - No hardcoded API keys or credentials.
   - Proper use of `.env` and `st.secrets`.
   - Sanitize and validate user inputs.
   - Check for safe API handling and Supabase connections.

8. üßæ **Logging & Monitoring**
   - Use Python `logging` with proper levels (INFO, WARNING, ERROR).
   - Centralize log output for debugging or audit trails.

9. üìò **Type Hints & Documentation**
   - Verify consistency between type hints and real return values.
   - Ensure every function/class includes docstrings (purpose, args, returns).

10. üìä **Visualization (Plotly / Altair)**
    - Evaluate chart clarity and reactivity.
    - Check layout consistency and accessibility (colors, tooltips).
    - Suggest improvements for performance or user experience.

# Expected Output
Return your findings in structured sections:
- üîç Cleanliness & Style
- üß© Structure & Modularity
- ‚öôÔ∏è Performance & Deployment
- üß™ Testing & Validation
- ü§ñ ML & Data
- üß† Streamlit
- üîí Security
- üßæ Logging
- üìò Type Hints & Docs
- üìä Visualization
Include concise code examples for recommended improvements.


## üöÄ Project-Specific Guidelines

### Weather Data Handling
- **Strategic Locations**: 6 key points in C√≥rdoba, Argentina
  - C√≥rdoba Centro: (-31.4201¬∞S, -64.1888¬∞W) - Plaza San Mart√≠n
  - Aeropuerto SACO/COR: (-31.3236¬∞S, -64.2079¬∞W) - Aeropuerto Internacional Ingeniero Ambrosio L.V. Taravella
  - R√≠o Cuarto: (-33.1303¬∞S, -64.3499¬∞W) - Aeropuerto R√≠o Cuarto (SAOC/RCU)
  - Altagracia: (-31.2500¬∞S, -64.2500¬∞W) - Localidad estrat√©gica (SAGR)
  - Villa Mar√≠a: (-32.3206¬∞S, -63.2264¬∞W) - Aeropuerto Villa Mar√≠a (SACV/VME)
  - San Francisco: (-31.4278¬∞S, -62.0831¬∞W) - Aeropuerto San Francisco (SANS/SFN)
- **Units**: Metric system (Celsius, km/h, hPa)
- **Wind Direction**: Cardinal + degrees (e.g., "NNE (30¬∞)")
- **Pressure**: QNH format for aviation standards
- **Multi-location Analysis**: Correlation between 6 strategic points across C√≥rdoba region
- **Aeronautical Integration**: ICAO/IATA codes for aviation professionals
- **Regional Coverage**: North (Altagracia), Center (C√≥rdoba), South (R√≠o Cuarto), East (Villa Mar√≠a), Northeast (San Francisco)
- **Aviation Standards**: OACI compliance with official airport codes
- **Strategic Positioning**: Coverage of major aviation routes and industrial centers

### Alert System
- **Probability Thresholds**: 40% (moderate), 60% (high), 80% (critical)
- **Time Estimates**: 15-30min (critical), 30-60min (high), 1-2h (moderate)
- **Alert Levels**: LOW, MEDIUM, HIGH, CRITICAL
- **Color Coding**: Green ‚Üí Yellow ‚Üí Orange ‚Üí Red
- **Visual Indicators**: Emojis and CSS styling for clear alerts

### Cache Management
- **TTL**: 30 minutes (optimized for weather data)
- **Storage**: In-memory cache with JSON backup
- **Cleanup**: Automatic expired entry removal
- **Statistics**: Hit/miss rates, age tracking, performance metrics
- **Force Refresh**: Bypass cache when needed
- **Multi-API Support**: Separate cache for Windy and OpenWeather

### Authentication Configuration
- **Environment Variables**: Required for system operation
  - `ADMIN_PASSWORD`: Password for admin user (required)
  - `GUEST_PASSWORD`: Password for invited user (required)
  - `OPENWEATHER_API_KEY`: OpenWeatherMap API key
  - `WINDY_API_KEY`: Windy API key (optional)
- **User Management**: Simple two-user system
  - Admin and invited users have identical access levels
  - No user registration - credentials managed via environment variables
  - Session-based authentication with Streamlit session state
- **Security Features**:
  - HMAC password verification for secure comparison
  - Account lockout after 5 failed login attempts (5-minute duration)
  - Comprehensive logging of authentication events

### ML Model Features
- **Input Features**: wind_speed, wind_direction, wind_gust, humidity, temperature, pressure, cloudiness, season
- **Target**: Storm probability (0-100%)
- **Algorithm**: GradientBoostingRegressor with 100 estimators
- **Validation**: 80/20 train/test split
- **Metrics**: MSE, accuracy, precision, recall
- **Real-time Updates**: Live prediction with visual feedback

## üéØ Success Metrics

- **Response Time**: <2 seconds for cached data
- **Accuracy**: >85% storm prediction accuracy
- **Reliability**: 99% uptime with graceful degradation
- **User Experience**: Intuitive web interface for aviation professionals
- **Security**: 0 critical vulnerabilities, secure API key management
- **Performance**: 80% cache hit rate, optimized API usage

## üéØ Objective
- Keep workflow clean, scalable, and easy to maintain.
- All code must integrate smoothly with my stack (Streamlit/Taipy + Supabase + Vercel).
- **Contextualize and summarize before making decisions**.
- Follow security best practices (HttpOnly cookies, HTTPS, JWT).
- Use modern Python features and avoid deprecated patterns.

## üîÆ Future Roadmap
- **ML Enhancement**: Real-time model retraining with live data
- **Extended Coverage**: Support for additional airports and regions beyond current 6 locations
- **Mobile App**: Progressive Web App (PWA) for mobile access
- **Advanced ML**: Deep learning models, ensemble methods, neural networks
- **Integration**: ATC systems, flight planning software, weather stations
- **Real-time Alerts**: Push notifications and email alerts
- **Advanced Analytics**: Historical trend analysis and pattern recognition
- **Regional Expansion**: Support for neighboring provinces (Santa Fe, La Pampa, San Luis)

## üõ°Ô∏è Security & Compliance
- **API Security**: Secure key management, rate limiting, input validation
- **Data Protection**: No sensitive data storage, secure data transmission
- **Vulnerability Scanning**: Regular security audits with Bandit, Safety, pip-audit
- **Code Quality**: Pylint compliance, type annotations, comprehensive testing
- **Model Security**: joblib serialization (NO pickle), secure model storage
- **Authentication Security**: 
  - HMAC-based password verification (no plain text storage)
  - Anti-brute force protection with account lockout
  - Session state management with Streamlit
  - Environment variable-based credential management
  - Secure logging of authentication events
- **Logging Security**: 
  - UTF-8 encoding for international character support
  - Log rotation to prevent disk space issues
  - Separate log files for different security concerns
  - No sensitive data in log messages

---
*"Precision in meteorology saves lives in aviation"* ‚úàÔ∏èüå¶Ô∏è  
