"""
M√≥dulo de M√©tricas de Precisi√≥n para CorAlertMet Intelligence
Muestra confiabilidad detallada de modelos meteorol√≥gicos
"""

from datetime import datetime, timedelta

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

@st.cache_data(ttl=1800, show_spinner=False)  # Cache 30 minutos para m√©tricas de precisi√≥n
def show_precision_metrics():
    """Mostrar m√©tricas de precisi√≥n detalladas de modelos"""

    # Simular datos de precisi√≥n hist√≥rica
    models_data = {
        "ECMWF": {
            "name": "ECMWF",
            "accuracy_24h": 0.92,
            "accuracy_48h": 0.88,
            "accuracy_72h": 0.84,
            "temperature_rmse": 1.2,
            "pressure_rmse": 2.1,
            "wind_rmse": 3.4,
            "precipitation_skill": 0.78,
            "last_update": datetime.now() - timedelta(hours=6)
        },
        "GFS27": {
            "name": "GFS27",
            "accuracy_24h": 0.88,
            "accuracy_48h": 0.85,
            "accuracy_72h": 0.82,
            "temperature_rmse": 1.5,
            "pressure_rmse": 2.8,
            "wind_rmse": 4.2,
            "precipitation_skill": 0.72,
            "last_update": datetime.now() - timedelta(hours=3)
        },
        "ICON7": {
            "name": "ICON7",
            "accuracy_24h": 0.90,
            "accuracy_48h": 0.87,
            "accuracy_72h": 0.83,
            "temperature_rmse": 1.3,
            "pressure_rmse": 2.3,
            "wind_rmse": 3.8,
            "precipitation_skill": 0.75,
            "last_update": datetime.now() - timedelta(hours=4)
        },
        "HRRR": {
            "name": "HRRR",
            "accuracy_24h": 0.94,
            "accuracy_48h": 0.91,
            "accuracy_72h": 0.87,
            "temperature_rmse": 0.9,
            "pressure_rmse": 1.8,
            "wind_rmse": 2.9,
            "precipitation_skill": 0.82,
            "last_update": datetime.now() - timedelta(hours=1)
        }
    }

    # M√©tricas principales
    st.markdown("### üìä Precisi√≥n por Horizonte Temporal")

    # Crear DataFrame para gr√°fico
    accuracy_data = []
    for model_id, model_info in models_data.items():
        accuracy_data.append({
            "Modelo": model_info["name"],
            "24h": model_info["accuracy_24h"] * 100,
            "48h": model_info["accuracy_48h"] * 100,
            "72h": model_info["accuracy_72h"] * 100
        })

    df_accuracy = pd.DataFrame(accuracy_data)

    # Gr√°fico de precisi√≥n temporal con mejoras visuales para pilotos
    fig = go.Figure()

    # Colores y estilos espec√≠ficos para aviaci√≥n
    model_styles = {
        "HRRR": {"color": "#FF4444", "symbol": "diamond", "line_style": "solid"},
        "ECMWF": {"color": "#00AA44", "symbol": "circle", "line_style": "solid"},
        "ICON7": {"color": "#0066CC", "symbol": "square", "line_style": "dash"},
        "GFS27": {"color": "#FF8800", "symbol": "triangle-up", "line_style": "dot"}
    }

    for model in df_accuracy["Modelo"]:
        model_data = df_accuracy[df_accuracy["Modelo"] == model]
        style = model_styles.get(
            model,
            {"color": "#666666",
            "symbol": "circle",
            "line_style": "solid"})

        fig.add_trace(go.Scatter(
            x=["24h", "48h", "72h"],
            y=[model_data["24h"].iloc[0], model_data["48h"].iloc[0], model_data["72h"].iloc[0]],
            mode='lines+markers+text',
            name=model,
            line=dict(width=4, color=style["color"], dash=style["line_style"]),
            marker=dict(
                size=12,
                color=style["color"],
                symbol=style["symbol"],
                line=dict(width=2, color="white")
            ),
text = (
                [f"{val:.0f}%" for val in [model_data["24h"].iloc[0], model_data["48h"].iloc[0], model_data["72h"].iloc[0]]],
            )
            textposition="top center",
            textfont=dict(size=10, color=style["color"], family="Arial Black")
        ))

    # Zonas de confianza para interpretaci√≥n r√°pida
    fig.add_hrect(
        y0=90,
        y1=100,
        fillcolor="rgba(0,
        255,
        0,
        0.1)",
        layer="below",
        line_width=0,
        annotation_text="üü¢ EXCELENTE (>90%)")
    fig.add_hrect(
        y0=80,
        y1=90,
        fillcolor="rgba(255,
        255,
        0,
        0.1)",
        layer="below",
        line_width=0,
        annotation_text="üü° BUENO (80-90%)")
    fig.add_hrect(
        y0=70,
        y1=80,
        fillcolor="rgba(255,
        165,
        0,
        0.1)",
        layer="below",
        line_width=0,
        annotation_text="üü† ACEPTABLE (70-80%)")
    fig.add_hrect(
        y0=0,
        y1=70,
        fillcolor="rgba(255,
        0,
        0,
        0.1)",
        layer="below",
        line_width=0,
        annotation_text="üî¥ CR√çTICO (<70%)")

    fig.update_layout(
        title=dict(
            text="üéØ PRECISI√ìN DE MODELOS METEOROL√ìGICOS<br><sub>Para Planificaci√≥n de Vuelo</sub>",
            font=dict(size=18, family="Arial Black"),
            x=0.5
        ),
        xaxis=dict(
            title=dict(text="HORIZONTE TEMPORAL", font=dict(size=14, family="Arial Black")),
            tickfont=dict(size=12, family="Arial"),
            gridcolor="rgba(128,128,128,0.3)",
            gridwidth=1
        ),
        yaxis=dict(
            title=dict(text="PRECISI√ìN (%)", font=dict(size=14, family="Arial Black")),
            tickfont=dict(size=12, family="Arial"),
            range=[60, 100],
            gridcolor="rgba(128,128,128,0.3)",
            gridwidth=1,
            tickmode="linear",
            tick0=60,
            dtick=10
        ),
        height=500,
        hovermode='x unified',
        plot_bgcolor="rgba(248,249,250,0.8)",
        paper_bgcolor="white",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(size=12, family="Arial Black")
        ),
        margin=dict(l=50, r=50, t=100, b=50)
    )

    st.plotly_chart(fig, use_container_width=True)

    # Indicadores visuales r√°pidos para pilotos
    st.markdown("### üõ©Ô∏è Indicadores R√°pidos")

    # Crear m√©tricas visuales en tiempo real
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        # Mejor modelo para 24h
        best_24h = df_accuracy.loc[df_accuracy['24h'].idxmax()]
        st.metric(
            label="üèÜ MEJOR 24H",
            value=f"{best_24h['Modelo']}",
            delta=f"{best_24h['24h']:.0f}%",
            help="Modelo m√°s preciso para pron√≥sticos de 24 horas"
        )

    with col2:
        # Mejor modelo para 48h
        best_48h = df_accuracy.loc[df_accuracy['48h'].idxmax()]
        st.metric(
            label="üéØ MEJOR 48H",
            value=f"{best_48h['Modelo']}",
            delta=f"{best_48h['48h']:.0f}%",
            help="Modelo m√°s preciso para pron√≥sticos de 48 horas"
        )

    with col3:
        # Degradaci√≥n promedio
        avg_degradation = df_accuracy.apply(
            lambda row: (row['24h'] - row['72h']) / row['24h'] * 100,
            axis=1).mean()
        st.metric(
            label="üìâ DEGRADACI√ìN",
            value=f"{avg_degradation:.1f}%",
            delta="por 48h",
            help="Degradaci√≥n promedio de precisi√≥n de 24h a 72h"
        )

    with col4:
        # Confiabilidad general
        overall_confidence = df_accuracy[['24h', '48h', '72h']].mean().mean()
confidence_level = (
            "ALTA" if overall_confidence > 85 else "MEDIA" if overall_confidence > 75 else "BAJA"
        )
        st.metric(
            label="üîç CONFIABILIDAD",
            value=confidence_level,
            delta=f"{overall_confidence:.0f}%",
            help="Nivel general de confiabilidad de los modelos"
        )

    # Tabla de interpretaci√≥n r√°pida
    st.markdown("#### üìã Gu√≠a de Interpretaci√≥n R√°pida")

    interpretation_data = []
    for _, row in df_accuracy.iterrows():
        # Determinar nivel de confianza
        avg_precision = (row['24h'] + row['48h'] + row['72h']) / 3
        if avg_precision >= 90:
            confidence = "üü¢ ALTA"
            recommendation = "IDEAL para vuelos cr√≠ticos"
        elif avg_precision >= 80:
            confidence = "üü° MEDIA"
            recommendation = "BUENA para planificaci√≥n general"
        elif avg_precision >= 70:
            confidence = "üü† BAJA"
            recommendation = "USAR con precauci√≥n"
        else:
            confidence = "üî¥ CR√çTICA"
            recommendation = "NO RECOMENDADO"

        interpretation_data.append({
            "Modelo": row['Modelo'],
            "24h": f"{row['24h']:.0f}%",
            "48h": f"{row['48h']:.0f}%",
            "72h": f"{row['72h']:.0f}%",
            "Promedio": f"{avg_precision:.0f}%",
            "Confianza": confidence,
            "Recomendaci√≥n": recommendation
        })

    interpretation_df = pd.DataFrame(interpretation_data)
    st.dataframe(
        interpretation_df,
        use_container_width=True,
        column_config={
            "Modelo": st.column_config.TextColumn("Modelo", width="small"),
            "24h": st.column_config.TextColumn("24h", width="small"),
            "48h": st.column_config.TextColumn("48h", width="small"),
            "72h": st.column_config.TextColumn("72h", width="small"),
            "Promedio": st.column_config.TextColumn("Promedio", width="small"),
            "Confianza": st.column_config.TextColumn("Confianza", width="medium"),
            "Recomendaci√≥n": st.column_config.TextColumn("Recomendaci√≥n", width="large")
        }
    )

    # Estado de actualizaci√≥n integrado
    st.markdown("#### üîÑ Estado de Actualizaci√≥n de Modelos")

    # Crear columnas para mostrar estado de actualizaci√≥n
    update_cols = st.columns(4)

    for i, (model_id, model_info) in enumerate(models_data.items()):
        with update_cols[i]:
            last_update = model_info['last_update']
            hours_ago = (datetime.now() - last_update).total_seconds() / 3600

            if hours_ago < 6:
                status = "üü¢ Actualizado"
                status_color = "success"
            elif hours_ago < 12:
                status = "üü° Moderado"
                status_color = "warning"
            else:
                status = "üî¥ Desactualizado"
                status_color = "error"

            # Mostrar m√©trica de estado
            st.metric(
                label=f"üîÑ {model_info['name']}",
                value=status,
                delta=f"{hours_ago:.1f}h",
                help=f"√öltima actualizaci√≥n: {last_update.strftime('%H:%M')}"
            )

    # Resumen de estado general
    st.markdown("##### üìä Resumen de Estado General")

    # Calcular estad√≠sticas de actualizaci√≥n
    total_models = len(models_data)
    updated_models = sum(1 for model_info in models_data.values()
                        if (datetime.now() - model_info['last_update']).total_seconds() / 3600 < 6)
    moderate_models = sum(1 for model_info in models_data.values()
                         if 6 <= (datetime.now() - model_info['last_update']).total_seconds() / 3600 < 12)
    outdated_models = total_models - updated_models - moderate_models

    # Mostrar estad√≠sticas en columnas
    stat_col1, stat_col2, stat_col3, stat_col4 = st.columns(4)

    with stat_col1:
        st.metric("üü¢ Actualizados", updated_models, f"{updated_models/total_models*100:.0f}%")

    with stat_col2:
        st.metric("üü° Moderados", moderate_models, f"{moderate_models/total_models*100:.0f}%")

    with stat_col3:
        st.metric("üî¥ Desactualizados", outdated_models, f"{outdated_models/total_models*100:.0f}%")

    with stat_col4:
        avg_age = sum((datetime.now() - model_info['last_update']).total_seconds() / 3600
                     for model_info in models_data.values()) / total_models
        st.metric("‚è±Ô∏è Edad Promedio", f"{avg_age:.1f}h", "de los datos")

    # Alertas para pilotos
    if outdated_models > 0:
        st.warning(f"‚ö†Ô∏è **ALERTA**: {outdated_models} modelo(s) desactualizado(s). Considera usar datos m√°s frescos.")

    if updated_models == total_models:
        st.success("‚úÖ **EXCELENTE**: Todos los modelos est√°n actualizados. Datos √≥ptimos para planificaci√≥n de vuelo.")
    elif updated_models >= total_models * 0.75:
        st.info("‚ÑπÔ∏è **BUENO**: La mayor√≠a de modelos est√°n actualizados. Datos confiables para planificaci√≥n.")

    # Recomendaciones basadas en precisi√≥n
    st.markdown("### üí° Recomendaciones de Uso por Precisi√≥n")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.info("""
        **üåç ECMWF**
        - Mejor para: Precipitaciones
        - Precisi√≥n: 92% (24h)
        - Ideal: Pron√≥sticos globales
        """)

    with col2:
        st.success("""
        **üá∫üá∏ HRRR**
        - Mejor para: Alta resoluci√≥n
        - Precisi√≥n: 94% (24h)
        - Ideal: Estados Unidos
        """)

    with col3:
        st.warning("""
        **üá™üá∫ ICON7**
        - Mejor para: Europa
        - Precisi√≥n: 90% (24h)
        - Ideal: Regiones espec√≠ficas
        """)

    with col4:
        st.info("""
        **üåê GFS27**
        - Mejor para: Largo plazo
        - Precisi√≥n: 88% (24h)
        - Ideal: An√°lisis global
        """)

